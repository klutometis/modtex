--- gnuplot-4.2.0-orig/src/command.c	2007-03-09 00:17:49.000000000 -0800
+++ gnuplot-4.2.0/src/command.c	2007-03-09 00:22:34.000000000 -0800
@@ -2045,31 +2045,12 @@
 {
     screen_ok = FALSE;
     c_token++;
-
-    if ((vaxc$errno = lib$spawn()) != SS$_NORMAL) {
-	os_error(NO_CARET, "spawn error");
-    }
 }
 
 
 static void
 do_system(const char *cmd)
 {
-
-     if (!cmd)
-	return;
-
-    /* gp_input_line is filled by read_line or load_file, but
-     * line_desc length is set only by read_line; adjust now
-     */
-    line_desc.dsc$w_length = strlen(cmd);
-    line_desc.dsc$a_pointer = (char *) cmd;
-
-    if ((vaxc$errno = lib$spawn(&line_desc)) != SS$_NORMAL)
-	os_error(NO_CARET, "spawn error");
-
-    (void) putc('\n', stderr);
-
 }
 #endif /* VMS */
 
@@ -2289,45 +2270,6 @@
 static void
 do_system(const char *cmd)
 {
-# ifdef AMIGA_AC_5
-    static char *parms[80];
-    if (!cmd)
-	return;
-    getparms(input_line + 1, parms);
-    fexecv(parms[0], parms);
-# elif (defined(ATARI) && defined(__GNUC__))
-/* || (defined(MTOS) && defined(__GNUC__)) */
-    /* use preloaded shell, if available */
-    short (*shell_p) (char *command);
-    void *ssp;
-
-    if (!cmd)
-	return;
-
-    ssp = (void *) Super(NULL);
-    shell_p = *(short (**)(char *)) 0x4f6;
-    Super(ssp);
-
-    /* this is a bit strange, but we have to have a single if */
-    if (shell_p)
-	(*shell_p) (cmd);
-    else
-	system(cmd);
-# elif defined(_Windows) && defined(USE_OWN_WINSYSTEM_FUNCTION)
-    if (!cmd)
-	return;
-    winsystem(cmd);
-# else /* !(AMIGA_AC_5 || ATARI && __GNUC__ || _Windows) */
-/* (am, 19980929)
- * OS/2 related note: cmd.exe returns 255 if called w/o argument.
- * i.e. calling a shell by "!" will always end with an error message.
- * A workaround has to include checking for EMX,OS/2, two environment
- *  variables,...
- */
-    if (!cmd)
-	return;
-    system(cmd);
-# endif /* !(AMIGA_AC_5 || ATARI&&__GNUC__ || _Windows) */
 }
 
 
@@ -2433,17 +2375,6 @@
 {
     screen_ok = FALSE;
     c_token++;
-
-    if (user_shell) {
-#  if defined(_Windows)
-	if (WinExec(user_shell, SW_SHOWNORMAL) <= 32)
-#  elif defined(DJGPP)
-	    if (system(user_shell) == -1)
-#  else
-		if (spawnl(P_WAIT, user_shell, NULL) == -1)
-#  endif			/* !(_Windows || DJGPP) */
-		    os_error(NO_CARET, "unable to spawn shell");
-    }
 }
 
 # elif defined(AMIGA_SC_6_1)
@@ -2453,12 +2384,6 @@
 {
     screen_ok = FALSE;
     c_token++;
-
-    if (user_shell) {
-	if (system(user_shell))
-	    os_error(NO_CARET, "system() failed");
-    }
-    (void) putc('\n', stderr);
 }
 
 #  elif defined(OS2)
@@ -2468,13 +2393,6 @@
 {
     screen_ok = FALSE;
     c_token++;
-
-    if (user_shell) {
-	if (system(user_shell) == -1)
-	    os_error(NO_CARET, "system() failed");
-
-    }
-    (void) putc('\n', stderr);
 }
 
 #  else				/* !OS2 */
@@ -2485,17 +2403,8 @@
 void
 do_shell()
 {
-    static char exec[100] = EXEC;
-
     screen_ok = FALSE;
     c_token++;
-
-    if (user_shell) {
-	if (system(safe_strncpy(&exec[sizeof(EXEC) - 1], user_shell,
-				sizeof(exec) - sizeof(EXEC) - 1)))
-	    os_error(NO_CARET, "system() failed");
-    }
-    (void) putc('\n', stderr);
 }
 
 # endif				/* !MSDOS */
@@ -2860,109 +2769,5 @@
 int
 do_system_func(const char *cmd, char **output)
 {
-
-#if defined(VMS) || defined(PIPES) || (defined(ATARI) || defined(MTOS)) && defined(__PUREC__)
-    int c;
-    FILE *f;
-    size_t cmd_len;
-    int result_allocated, result_pos;
-    char* result;
-    int ierr = 0;
-# ifdef AMIGA_AC_5
-    int fd;
-# elif (defined(ATARI) || defined(MTOS)) && defined(__PUREC__)
-    char *atari_tmpfile, *atari_cmd;
-# elif defined(VMS)
-    int chan, one = 1;
-    struct dsc$descriptor_s pgmdsc = {0, DSC$K_DTYPE_T, DSC$K_CLASS_S, 0};
-    static $DESCRIPTOR(lognamedsc, "PLOT$MAILBOX");
-# endif /* VMS */
-
-    cmd_len = strlen(cmd);
-
-    /* open stream */
-# ifdef VMS
-    pgmdsc.dsc$a_pointer = cmd;
-    pgmdsc.dsc$w_length = cmd_len;
-    if (!((vaxc$errno = sys$crembx(0, &chan, 0, 0, 0, 0, &lognamedsc)) & 1))
-	os_error(NO_CARET, "sys$crembx failed");
-
-    if (!((vaxc$errno = lib$spawn(&pgmdsc, 0, &lognamedsc, &one)) & 1))
-	os_error(NO_CARET, "lib$spawn failed");
-
-    if ((f = fopen("PLOT$MAILBOX", "r")) == NULL)
-	os_error(NO_CARET, "mailbox open failed");
-# elif (defined(ATARI) || defined(MTOS)) && defined(__PUREC__)
-    if (system(NULL) == 0)
-	os_error(NO_CARET, "no command shell");
-    atari_tmpfile = tmpnam(NULL);
-    atari_cmd = gp_alloc(cmd_len + 5 + strlen(atari_tmpfile),
-			 "command string");
-    strcpy(atari_cmd, cmd);
-    strcat(atari_cmd, " >> ");
-    strcat(atari_cmd, atari_tmpfile);
-    system(atari_cmd);
-    free(atari_cmd);
-    if ((f = fopen(atari_tmpfile, "r")) == NULL)
-# elif defined(AMIGA_AC_5)
-	if ((fd = open(cmd, "O_RDONLY")) == -1)
-# else	/* everyone else */
-	    if ((f = popen(cmd, "r")) == NULL)
-		os_error(NO_CARET, "popen failed");
-# endif	/* everyone else */
-
-    /* get output */
-    result_pos = 0;
-    result_allocated = MAX_LINE_LEN;
-    result = gp_alloc(MAX_LINE_LEN, "do_system_func");
-    result[0] = NUL;
-    while (1) {
-# if defined(AMIGA_AC_5)
-	char ch;
-	if (read(fd, &ch, 1) != 1)
-	    break;
-	c = ch;
-# else
-	if ((c = getc(f)) == EOF)
-	    break;
-# endif				/* !AMIGA_AC_5 */
-	/* result <- c */
-	result[result_pos++] = c;
-	if ( result_pos == result_allocated ) {
-	    if ( result_pos >= MAX_TOTAL_LINE_LEN ) {
-		result_pos--;
-		int_warn(NO_CARET,
-			 "*very* long system call output has been truncated");
-		break;
-	    } else {
-		result = gp_realloc(result, result_allocated + MAX_LINE_LEN,
-				    "extend in do_system_func");
-		result_allocated += MAX_LINE_LEN;
-	    }
-	}
-    }
-    result[result_pos] = NUL;
-
-    /* close stream */
-# ifdef AMIGA_AC_5
-    (void) close(fd);
-# elif (defined(ATARI) || defined(MTOS)) && defined(__PUREC__)
-    (void) fclose(f);
-    (void) unlink(atari_tmpfile);
-# else				/* Rest of the world */
-    ierr = pclose(f);
-# endif
-
-    result = gp_realloc(result, strlen(result)+1, "do_system_func");
-    *output = result;
-    return ierr;
-
-#else /* VMS || PIPES || ATARI && PUREC */
-
-    int_warn(NO_CARET, "system evaluation not supported by %s", OS);
-    *output = gp_strdup("");
-    return 0;
-
-#endif /* VMS || PIPES || ATARI && PUREC */
-
+  return 0;
 }
