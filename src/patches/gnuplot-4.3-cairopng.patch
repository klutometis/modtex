diff -Naur gnuplot-orig/ChangeLog gnuplot/ChangeLog
--- gnuplot-orig/ChangeLog	2007-09-16 00:20:39.000000000 -0700
+++ gnuplot/ChangeLog	2007-09-16 00:21:40.000000000 -0700
@@ -1,3 +1,11 @@
+2007-09-15  Peter Danenberg  <pcd@wikitex.org>
+
+	* term/cairopng.trm: 
+	* configure.in:
+	* src/term.h: 
+	* INSTALL:
+	New cairopng terminal based on cairopdf with trivial modifications.
+
 2007-09-01  Ethan Merritt  <merritt@u.washington.edu>
 
 	* src/datafile.h src/datafile.c: make df_eof static rather than global.
diff -Naur gnuplot-orig/configure.in gnuplot/configure.in
--- gnuplot-orig/configure.in	2007-09-16 00:20:39.000000000 -0700
+++ gnuplot/configure.in	2007-09-16 00:21:40.000000000 -0700
@@ -981,6 +981,25 @@
   fi
 fi
 
+AC_ARG_WITH(cairopng,dnl
+[  --without-cairopng      cairopng terminal (default enabled)],,
+  [test -z "${with_cairopng}" && with_cairopng=yes])
+
+if test "${with_cairopng}" = yes ; then
+  dnl cairopng terminal
+  PKG_CHECK_MODULES_NOFAIL(CAIROPNG,dnl
+       [cairo >= 1.2 pango >= 1.10 pangocairo >= 1.10 glib-2.0])
+  if test $pkg_failed != no; then
+    AC_MSG_WARN([The cairopng terminal will not be compiled.])
+    with_cairopng=no
+  else
+    AC_DEFINE(HAVE_CAIROPNG,1, [ Define if you want the cairopng terminal. ])
+    CPPFLAGS="$CPPFLAGS $CAIROPNG_CFLAGS"
+    LIBS="$LIBS $CAIROPNG_LIBS"
+    with_cairopng=yes
+  fi
+fi
+
 build_gpcairo=no
 if test "${enable_wxwidgets_ok}" = yes; then
   build_gpcairo=yes
@@ -988,6 +1007,9 @@
 if test "${with_cairopdf}" = yes; then
   build_gpcairo=yes
 fi
+if test "${with_cairopng}" = yes; then
+  build_gpcairo=yes
+fi
 
 AM_CONDITIONAL(BUILD_GPCAIRO, test "${build_gpcairo}" = yes)
 
@@ -1207,6 +1229,12 @@
   AC_MSG_RESULT([  cairopdf terminal: no (requires cairo>1.2, pango>1.10)])
 fi
 
+if test "$with_cairopng" = yes; then
+  AC_MSG_RESULT([  cairopng terminal: yes (EXPERIMENTAL)])
+else
+  AC_MSG_RESULT([  cairopng terminal: no (requires cairo>1.2, pango>1.10)])
+fi
+
 AC_MSG_RESULT([])
 AC_MSG_RESULT([  Additional terminals are availaible in platform-specific makefiles:])
 AC_MSG_RESULT([   amiga (makefile.amg and makefile.ami), apollo/gpr (makefile.unx), atari/vdi])
diff -Naur gnuplot-orig/src/term.h gnuplot/src/term.h
--- gnuplot-orig/src/term.h	2007-09-16 00:20:38.000000000 -0700
+++ gnuplot/src/term.h	2007-09-16 00:21:40.000000000 -0700
@@ -459,4 +459,8 @@
 # include "cairo.trm"
 #endif
 
+#ifdef HAVE_CAIROPNG
+# include "cairopng.trm"
+#endif
+
 #endif /* !SHORT_TERMLIST */
diff -Naur gnuplot-orig/term/cairopng.trm gnuplot/term/cairopng.trm
--- gnuplot-orig/term/cairopng.trm	1969-12-31 16:00:00.000000000 -0800
+++ gnuplot/term/cairopng.trm	2007-09-16 00:32:01.000000000 -0700
@@ -0,0 +1,823 @@
+/* GNUPLOT - cairopng.trm */
+
+/*[
+ * Copyright 2007   Peter Danenberg
+ * Based on Timothee Lecomte's cairo.trm with trivial enhancements.
+ *
+ * Permission to use, copy, and distribute this software and its
+ * documentation for any purpose with or without fee is hereby granted,
+ * provided that the above copyright notice appear in all copies and
+ * that both that copyright notice and this permission notice appear
+ * in supporting documentation.
+ *
+ * Permission to modify the software is granted, but not the right to
+ * distribute the complete modified source code.  Modifications are to
+ * be distributed as patches to the released version.  Permission to
+ * distribute binaries produced by compiling modified sources is granted,
+ * provided you
+ *   1. distribute the corresponding source modifications from the
+ *    released version in the form of a patch file along with the binaries,
+ *   2. add special version identification to distinguish your version
+ *    in addition to the base release version number,
+ *   3. provide your name and address as the primary contact for the
+ *    support of your modified version, and
+ *   4. retain our contact information in regard to use of the base
+ *    software.
+ * Permission to distribute the released version of the source code along
+ * with corresponding source modifications in the form of a patch file is
+ * granted with same provisions 2 through 4 for binary distributions.
+ *
+ * This software is provided "as is" without express or implied warranty
+ * to the extent permitted by applicable law.
+ ]*/
+
+#ifdef TERM_REGISTER
+register_term (cairopng)
+#endif
+
+#ifdef TERM_PROTO
+TERM_PUBLIC void cairopng_options __PROTO ((void));
+TERM_PUBLIC void cairopng_init __PROTO ((void));
+TERM_PUBLIC void cairopng_graphics __PROTO ((void));
+TERM_PUBLIC void cairopng_text __PROTO ((void));
+TERM_PUBLIC void cairopng_linetype __PROTO ((int linetype));
+TERM_PUBLIC void cairopng_move __PROTO ((unsigned int x, unsigned int y));
+TERM_PUBLIC void cairopng_vector __PROTO ((unsigned int x, unsigned int y));
+TERM_PUBLIC void cairopng_put_text __PROTO ((unsigned int x, unsigned int y, const char *str));
+TERM_PUBLIC void cairopng_reset __PROTO ((void));
+TERM_PUBLIC int cairopng_justify_text __PROTO ((enum JUSTIFY mode));
+TERM_PUBLIC void cairopng_point __PROTO ((unsigned int x, unsigned int y, int pointstyle));
+TERM_PUBLIC void cairopng_linewidth __PROTO ((double linewidth));
+TERM_PUBLIC int cairopng_text_angle __PROTO ((int ang));
+TERM_PUBLIC void cairopng_fillbox __PROTO ((int style, unsigned int x1, unsigned int y1, unsigned int width, unsigned int height));
+TERM_PUBLIC int cairopng_set_font __PROTO ((const char *font));
+TERM_PUBLIC void cairopng_pointsize __PROTO ((double ptsize));
+#ifdef WITH_IMAGE
+TERM_PUBLIC void cairopng_image __PROTO ((unsigned M, unsigned N, coordval * image, gpiPoint * corner, t_imagecolor color_mode));
+#endif /*WITH_IMAGE*/
+TERM_PUBLIC int cairopng_make_palette __PROTO ((t_sm_palette *palette));
+TERM_PUBLIC void cairopng_set_color __PROTO ((t_colorspec *colorspec));
+TERM_PUBLIC void cairopng_filled_polygon __PROTO ((int n, gpiPoint * corners));
+#endif /* TERM_PROTO */
+
+#ifndef TERM_PROTO_ONLY
+
+#ifdef TERM_BODY
+
+#if   HAVE_STDINT_H
+# include <stdint.h>
+#elif HAVE_INTTYPES_H
+# include <inttypes.h>
+#elif HAVE_SYS_INT_TYPES_H
+# include <sys/int_types.h>
+#elif defined(_MSC_VER)
+typedef __int8 int8_t;
+typedef unsigned __int8 uint8_t;
+typedef __int16 int16_t;
+typedef unsigned __int16 uint16_t;
+typedef __int32 int32_t;
+typedef unsigned __int32 uint32_t;
+typedef __int64 int64_t;
+typedef unsigned __int64 uint64_t;
+# ifndef HAVE_UINT64_T
+#  define HAVE_UINT64_T 1
+# endif
+# ifndef INT16_MIN
+#  define INT16_MIN     (-32767-1)
+# endif
+# ifndef INT16_MAX
+#  define INT16_MAX     (32767)
+# endif
+# ifndef UINT16_MAX
+#  define UINT16_MAX    (65535)
+# endif
+#else
+#error Cannot find definitions for fixed-width integral types (uint8_t, uint32_t, etc.)
+#endif
+
+#include "wxterminal/gp_cairo.h"
+/* for enhanced text mode */
+#include "wxterminal/gp_cairo_term.h"
+
+#define CAIROPNG_DEFAULT_FONTNAME "Sans"
+#define CAIROPNG_DEFAULT_FONTSIZE 6 /* in points */
+#define CAIROPNG_DEFAULT_LINEWIDTH 0.25 /* in points */
+#define CAIROPNG_DEFAULT_WIDTH 5*72 /* in points, 5 inches */
+#define CAIROPNG_DEFAULT_HEIGHT 3*72 /* in points, 3 inches */
+
+/* terminal state */
+TBOOLEAN cairopng_enhanced_enabled = FALSE;
+TBOOLEAN cairopng_dashed = FALSE;
+TBOOLEAN cairopng_mono = FALSE;
+TBOOLEAN cairopng_rounded = FALSE;
+/* default text font family: */
+char cairopng_set_fontname[MAX_ID_LEN + 1] = "";
+/* default text size*/
+int cairopng_set_fontsize = 0;
+/* default width, in points */
+float cairopng_width = CAIROPNG_DEFAULT_WIDTH;
+/* default height, in points */
+float cairopng_height = CAIROPNG_DEFAULT_HEIGHT;
+/* Default multipliers for linewidths and dashlengths */
+float cairopng_lw = 1.0;
+float cairopng_dl = 1.0;
+
+int pngn = 0;
+
+plot_struct plot;
+
+enum CAIROPNG_id {
+  CAIROPNG_FONT,
+  CAIROPNG_ENHANCED,
+  CAIROPNG_NOENHANCED,
+  CAIROPNG_SIZE,
+  CAIROPNG_ROUNDED,
+  CAIROPNG_BUTT,
+  CAIROPNG_LINEWIDTH,
+  CAIROPNG_DASHED,
+  CAIROPNG_SOLID,
+  CAIROPNG_MONO,
+  CAIROPNG_COLOR,
+  CAIROPNG_DASHLENGTH,
+  CAIROPNG_OTHER
+};
+
+static struct gen_table cairopng_opts[] = {
+  {"f$ont",   CAIROPNG_FONT},
+  {"enh$anced", CAIROPNG_ENHANCED},
+  {"noenh$anced", CAIROPNG_NOENHANCED},
+  {"s$ize", CAIROPNG_SIZE},
+  {"round$ed", CAIROPNG_ROUNDED},
+  {"butt", CAIROPNG_BUTT},
+  {"lw", CAIROPNG_LINEWIDTH},
+  {"linewidth", CAIROPNG_LINEWIDTH},
+  {"dash$ed", CAIROPNG_DASHED},
+  {"solid", CAIROPNG_SOLID},
+  {"mono$chrome", CAIROPNG_MONO},
+  {"color", CAIROPNG_COLOR},
+  {"dl", CAIROPNG_DASHLENGTH},
+  {"dashlen$gth", CAIROPNG_DASHLENGTH},
+  {NULL, CAIROPNG_OTHER}
+};
+
+/* "Called when terminal type is selected. This procedure should parse options on the command line.
+ * A list of the currently selected options should be stored in term_options[],
+ * in a form suitable for use with the set term command.
+ * term_options[] is used by the save command.  Use options_null() if no options are available." */
+TERM_PUBLIC void cairopng_options()
+{
+  char *s = NULL;
+  char *font_setting = NULL;
+  int sep;
+  TBOOLEAN duplication = FALSE;
+  TBOOLEAN set_enhanced = FALSE, set_font = FALSE, set_size = FALSE;
+  TBOOLEAN set_capjoin = FALSE;
+  size_units cairopng_explicit_units = INCHES;
+  char tmp_term_options[MAX_LINE_LEN+1] = "";
+  cairopng_dashed = FALSE;        /* Dashed lines? (default is solid) */
+  cairopng_mono = FALSE;          /* Mono? (default is color) */
+
+  while (!END_OF_COMMAND) {
+    FPRINTF((stderr, "processing token\n"));
+    switch (lookup_table(&cairopng_opts[0], c_token)) {
+    case CAIROPNG_FONT:
+      c_token++;
+      if (!(s = try_to_get_string()))
+        int_error(c_token,"font: expecting string");
+      if (!(*s)) {
+        strcpy (cairopng_set_fontname, "");
+        cairopng_set_fontsize = 0;
+      } else {
+        sep = strcspn(s,",");
+        if (sep > 0) {
+          strncpy(cairopng_set_fontname, s, sep);
+          cairopng_set_fontname[sep] = '\0';
+        }
+        if (s[sep] == ',')
+          sscanf(&(s[sep+1]), "%d", &cairopng_set_fontsize);
+      }
+      font_setting = (char*) gp_alloc(strlen(s) + 1,"cairopng font");
+      strcpy(font_setting,s);
+      free(s);
+      if (set_font) duplication=TRUE;
+      set_font = TRUE;
+      break;
+    case CAIROPNG_ENHANCED:
+      c_token++;
+      cairopng_enhanced_enabled = TRUE;
+      term->flags |= TERM_ENHANCED_TEXT;
+      if (set_enhanced) duplication=TRUE;
+      set_enhanced = TRUE;
+      break;
+    case CAIROPNG_NOENHANCED:
+      c_token++;
+      cairopng_enhanced_enabled = FALSE;
+      term->flags &= ~TERM_ENHANCED_TEXT;
+      if (set_enhanced) duplication=TRUE;
+      set_enhanced = TRUE;
+      break;
+    case CAIROPNG_SIZE:
+      c_token++;
+      cairopng_explicit_units = parse_term_size(&cairopng_width, &cairopng_height, INCHES);
+      if (set_size) duplication=TRUE;
+      set_size = TRUE;
+      break;
+    case CAIROPNG_ROUNDED:
+      c_token++;
+      if (set_capjoin) duplication=TRUE;
+      cairopng_rounded = TRUE;
+      set_capjoin = TRUE;
+      break;
+    case CAIROPNG_BUTT:
+      c_token++;
+      if (set_capjoin) duplication=TRUE;
+      cairopng_rounded = FALSE;
+      set_capjoin = TRUE;
+      break;
+    case CAIROPNG_LINEWIDTH:
+      c_token++;
+      cairopng_lw = real_expression();
+      if (cairopng_lw < 0.0)
+        cairopng_lw = 1.0;
+      break;
+    case CAIROPNG_DASHED:
+      c_token++;
+      cairopng_dashed = TRUE;
+      break;
+    case CAIROPNG_SOLID:
+      c_token++;
+      cairopng_dashed = FALSE;
+      break;
+    case CAIROPNG_MONO:
+      c_token++;
+      cairopng_mono = TRUE;
+      break;
+    case CAIROPNG_COLOR:
+      c_token++;
+      cairopng_mono = FALSE;
+      break;
+    case CAIROPNG_DASHLENGTH:
+      c_token++;
+      cairopng_dl = real_expression();
+      if (cairopng_dl < 0.0)
+        cairopng_dl = 1.0;
+      break;
+    case CAIROPNG_OTHER:
+    default:
+      int_error(c_token, "unrecognized terminal option");
+      break;
+    }
+
+    if (duplication)
+      int_error(c_token-1, "Duplicated or contradicting arguments in cairopng term options.");
+  }
+
+  /* Save options back into options string in normalized format */
+  if (set_enhanced)
+    snprintf(term_options, sizeof(term_options)-strlen(term_options),
+             cairopng_enhanced_enabled ? " enhanced" : " noenhanced");
+
+  if (set_font) {
+    snprintf(tmp_term_options, sizeof(tmp_term_options), " font \"%s\"", font_setting);
+    free(font_setting);
+    strncat(term_options, tmp_term_options, sizeof(term_options)-strlen(term_options));
+  }
+
+  if (cairopng_mono)
+    strncat(term_options, " monochrome", sizeof(term_options)-strlen(term_options));
+
+  if (cairopng_dashed)
+    strncat(term_options, " dashed", sizeof(term_options)-strlen(term_options));
+
+  if (set_size) {
+    if (cairopng_explicit_units == CM)
+      snprintf(tmp_term_options,
+               sizeof(tmp_term_options),
+               " size %.2fcm, %.2fcm ",
+               2.54*cairopng_width/72., 2.54*cairopng_height/72.);
+    else
+      snprintf(tmp_term_options,
+               sizeof(tmp_term_options),
+               " size %.2fin, %.2fin ",
+               cairopng_width/72., cairopng_height/72.);
+    strncat(term_options, tmp_term_options, sizeof(term_options)-strlen(term_options));
+  }
+
+  if (set_capjoin) {
+    strncat(term_options, cairopng_rounded ? " rounded" : " butt",
+            sizeof(term_options)-strlen(term_options));
+  }
+
+  if (cairopng_lw != 1.0) {
+    snprintf(tmp_term_options,sizeof(tmp_term_options), " linewidth %g", cairopng_lw);
+    strncat(term_options, tmp_term_options, sizeof(term_options)-strlen(term_options));
+  }
+
+  if (cairopng_dl != 1.0) {
+    snprintf(tmp_term_options,sizeof(tmp_term_options), " dashlength %g", cairopng_dl);
+    strncat(term_options, tmp_term_options, sizeof(term_options)-strlen(term_options));
+  }
+}
+
+/* "Called once, when the device is first selected."
+ * Is the 'main' function of the terminal. */
+void cairopng_init()
+{
+  cairo_surface_t *surface;
+
+  FPRINTF((stderr,"Init\n"));
+
+  /* initialisations */
+  gp_cairo_initialize_plot(&plot);
+  plot.device_xmax = (double) cairopng_width;
+  plot.device_ymax = (double) cairopng_height;
+  plot.dashlength = cairopng_dl;
+  /* it is up to the png viewer to do the hinting */
+  plot.hinting = 0;
+  /* disable OPERATOR_SATURATE, not implemented in cairo png backend,
+   * results in bitmap fallback. However, polygons are drawn with seams
+   * between each other. */
+  plot.polygons_saturate = FALSE;
+
+  /* is supposed to be done in cairopng_reset */
+  if ( plot.cr )
+    cairo_destroy(plot.cr);
+
+  surface = cairo_image_surface_create (CAIRO_FORMAT_ARGB32,
+                                        plot.device_xmax /*double width_in_points*/,
+                                        plot.device_ymax /*double height_in_points*/);
+  plot.cr = cairo_create(surface);
+  cairo_surface_destroy( surface );
+
+  FPRINTF((stderr,"status = %s\n",cairo_status_to_string(cairo_status(plot.cr))));
+  FPRINTF((stderr,"Init finished \n"));
+}
+
+/* "Called just before a plot is going to be displayed."
+ * Should clear the terminal. */
+void cairopng_graphics()
+{
+  /* Clear background. */
+  gp_cairo_clear(&plot);
+
+  /* update the window scale factor first, cairo needs it */
+  plot.xscale = 1.0;
+  plot.yscale = 1.0;
+
+  /* update graphics state properties */
+  plot.rounded = cairopng_rounded;
+
+  FPRINTF((stderr,"Graphics1\n"));
+
+  /* set the transformation matrix of the context, and other details */
+  /* depends on plot.xscale and plot.yscale */
+  gp_cairo_initialize_context(&plot);
+
+  /* set or refresh terminal size according to the window size */
+  /* oversampling_scale is updated in gp_cairo_initialize_context */
+  term->xmax = (unsigned int) plot.device_xmax*plot.oversampling_scale;
+  term->ymax = (unsigned int) plot.device_ymax*plot.oversampling_scale;
+  plot.xmax = term->xmax;
+  plot.ymax = term->ymax;
+  /* initialize encoding */
+  plot.encoding = encoding;
+
+  /* set font details (hchar, vchar, h_tic, v_tic) according to settings */
+  cairopng_set_font("");
+
+  FPRINTF((stderr,"Graphics xmax %d ymax %d v_char %d h_char %d\n",
+           term->xmax, term->ymax, term->v_char, term->h_char));
+}
+
+void cairopng_text()
+{
+  FPRINTF((stderr,"Text0\n"));
+
+  /* don't forget to stroke the last path if vector was the last command */
+  gp_cairo_stroke(&plot);
+  /* and don't forget to draw the polygons if draw_polygon was the last command */
+  gp_cairo_end_polygon(&plot);
+
+  FPRINTF((stderr,"status = %s\n",cairo_status_to_string(cairo_status(plot.cr))));
+
+  /* finish the page - cairo_destroy still has to be called for the whole documentation
+   * to be written */
+  cairo_show_page(plot.cr);
+
+  FPRINTF((stderr,"status = %s\n",cairo_status_to_string(cairo_status(plot.cr))));
+
+  FPRINTF((stderr,"Text finished\n"));
+}
+
+int max(int a, int b) {
+  return a > b ? a : b;
+}
+
+int min(int a, int b) {
+  return a < b ? a : b;
+}
+
+/* sent when gnuplot exits and when the terminal or the output change.*/
+void cairopng_reset()
+{
+  /* finish the document */
+  cairo_surface_t *surface = cairo_get_target(plot.cr);
+  unsigned char *data = cairo_image_surface_get_data(surface);
+  int width = cairo_image_surface_get_width(surface),
+    height = cairo_image_surface_get_height(surface),
+    stride = cairo_image_surface_get_stride(surface),
+    i, j, x1 = 0, y1 = 0, x2 = width, y2 = height;
+  uint32_t *row;
+  const uint32_t BG = 0xffffffff;
+  /* Row-wise, top-down iteration */
+  for (i = 0; i < height; i++) {
+    row = (uint32_t *) (data + i * stride);
+    for (j = 0; j < width; j++) {
+      if (row[j] != BG) {
+        y1 = i;
+        goto found_y1;
+      }
+    }
+  }
+ found_y1:
+  /* Row-wise, bottom-up iteration */
+  for (i = height - 1; i >= y1; i--) {
+    row = (uint32_t *)(data + i * stride);
+    for (j = 0; j < width; j++) {
+      if (row[j] != BG) {
+        y2 = i;
+        goto found_y2;
+      }
+    }
+  }
+ found_y2:
+  /* Column-wise, left-to-right iteration */
+  for (j = 0; j < width; j++) {
+    for (i = 0; i < height; i++) {
+      row = (uint32_t *) (data + i * stride);
+      if (row[j] != BG) {
+        x1 = j;
+        goto found_x1;
+      }
+    }
+  }
+ found_x1:
+  /* Column-wise, right-to-left iteration */
+  for (j = width - 1; j >= x1; j--) {
+    for (i = 0; i < height; i++) {
+      row = (uint32_t *) (data + i * stride);
+      if (row[j] != BG) {
+        x2 = j;
+        goto found_x2;
+      }
+    }
+  }
+ found_x2:;
+  const int padding = 10;
+  int clip_width = min(x2 - x1 + padding, width);
+  int clip_height = min(y2 - y1 + padding, height);
+  cairo_surface_t *clip = cairo_image_surface_create
+    (CAIRO_FORMAT_ARGB32, clip_width, clip_height);
+  cairo_t *clip_cr = cairo_create(clip);
+  cairo_set_source_surface(clip_cr,
+                           cairo_get_target(plot.cr),
+                           -max(x1 - padding / 2, 0),
+                           -max(y1 - padding / 2, 0));
+  cairo_rectangle(clip_cr, 0, 0, clip_width, clip_height);
+  cairo_fill(clip_cr);
+  cairo_surface_write_to_png(clip, "plot-clip.png");
+  cairo_surface_write_to_png(cairo_get_target(plot.cr), outstr);
+  cairo_destroy(plot.cr);
+
+  FPRINTF((stderr,"cairopng_reset\n"));
+}
+
+void cairopng_move(unsigned int x, unsigned int y)
+{
+  gp_cairo_move(&plot, x, term->ymax - y);
+}
+
+void cairopng_vector(unsigned int x, unsigned int y)
+{
+  gp_cairo_vector(&plot, x, term->ymax - y);
+}
+
+void cairopng_put_text(unsigned int x, unsigned int y, const char * string)
+{
+  /* if ignore_enhanced_text is set, draw with the normal routine.
+   * This is meant to avoid enhanced syntax when the enhanced mode is on */
+  if (cairopng_enhanced_enabled && !ignore_enhanced_text)
+    gp_cairo_draw_enhanced_text(&plot, x, term->ymax - y, string);
+  else
+    gp_cairo_draw_text(&plot, x, term->ymax - y, string);
+}
+
+void cairopng_linetype(int lt)
+{
+  gp_cairo_set_linetype(&plot, lt);
+
+  if (cairopng_dashed || lt == -1)
+    gp_cairo_set_linestyle(&plot,  GP_CAIRO_DASH);
+  else
+    gp_cairo_set_linestyle(&plot,  GP_CAIRO_SOLID);
+
+  if (cairopng_mono && lt >= -1)
+    gp_cairo_set_color(&plot, gp_cairo_linetype2color( -1 ));
+  else
+    gp_cairo_set_color(&plot, gp_cairo_linetype2color( lt ));
+
+}
+
+
+/* - fonts are selected as strings "name,size".
+ * - _set_font("") restores the terminal's default font.*/
+int cairopng_set_font (const char *font)
+{
+  char fontname[MAX_ID_LEN + 1] = "";
+  int fontsize = 0;
+
+  if (!font || !(*font)) {
+    strncpy(fontname, "", sizeof(fontname));
+    fontsize = 0;
+  } else {
+    int sep;
+
+    sep = strcspn(font,",");
+    if (sep > 0) {
+      strncpy(fontname, font, sep);
+      fontname[sep] = '\0';
+    }
+    if (font[sep] == ',')
+      sscanf(&(font[sep+1]), "%d", &fontsize);
+  }
+
+  if ( strlen(fontname) == 0 ) {
+    if ( strlen(cairopng_set_fontname) == 0 )
+      strncpy(fontname, CAIROPNG_DEFAULT_FONTNAME, sizeof(fontname));
+    else
+      strncpy(fontname, cairopng_set_fontname, sizeof(fontname));
+  }
+
+  if ( fontsize == 0 ) {
+    if ( cairopng_set_fontsize == 0 )
+      fontsize = CAIROPNG_DEFAULT_FONTSIZE;
+    else
+      fontsize = cairopng_set_fontsize;
+  }
+
+
+  /* Reset the term variables (hchar, vchar, h_tic, v_tic).
+   * They may be taken into account in next plot commands */
+  gp_cairo_set_font(&plot, fontname, fontsize);
+  gp_cairo_set_termvar(&plot);
+
+  /* the returned int is not used anywhere */
+  return 1;
+}
+        
+
+int cairopng_justify_text(enum JUSTIFY mode)
+{
+  gp_cairo_set_justify(&plot,mode);
+
+  return 1; /* we can justify */
+}
+
+void cairopng_point(unsigned int x, unsigned int y, int pointstyle)
+{
+  gp_cairo_draw_point(&plot, x, term->ymax - y, pointstyle);
+}
+
+void cairopng_pointsize(double ptsize)
+{
+  /* same behaviour as x11 terminal */
+  if (ptsize<0) ptsize = 1;
+
+  gp_cairo_set_pointsize(&plot, ptsize);
+}
+
+void cairopng_linewidth(double lw)
+{
+  lw *= cairopng_lw * CAIROPNG_DEFAULT_LINEWIDTH;
+  gp_cairo_set_linewidth(&plot, lw);
+}
+
+int cairopng_text_angle(int angle)
+{
+  /* a double is needed to compute cos, sin, etc. */
+  gp_cairo_set_textangle(&plot, (double) angle);
+
+  return 1; /* 1 means we can rotate */
+}
+
+void cairopng_fillbox(int style, unsigned int x, unsigned int y, unsigned int width, unsigned int height)
+{
+  gp_cairo_draw_fillbox(&plot, x, term->ymax - y,
+                        width, height,
+                        style);
+}
+
+int cairopng_make_palette(t_sm_palette * palette)
+{
+  /* we can do continuous colors */
+  return 0;
+}
+
+void cairopng_set_color(t_colorspec *colorspec)
+{
+  rgb_color rgb1;
+
+  if (colorspec->type == TC_LT) {
+    cairopng_linetype(colorspec->lt);
+    return;
+  } else if (colorspec->type == TC_FRAC && cairopng_mono) {
+    int save_colorMode = sm_palette.colorMode;
+    sm_palette.colorMode = SMPAL_COLOR_MODE_GRAY;
+    rgb1_from_gray( colorspec->value, &rgb1 );
+    sm_palette.colorMode = save_colorMode;
+  } else if (colorspec->type == TC_FRAC)
+    rgb1_from_gray( colorspec->value, &rgb1 );
+  else if (colorspec->type == TC_RGB) {
+    rgb1.r = (double) ((colorspec->lt >> 16) & 0xff)/255;
+    rgb1.g = (double) ((colorspec->lt >> 8) & 0xff)/255;
+    rgb1.b = (double) ((colorspec->lt) & 0xff)/255;
+  } else return;
+
+  gp_cairo_set_color(&plot, rgb1);
+}
+
+
+/* here we send the polygon command */
+void cairopng_filled_polygon(int n, gpiPoint *corners)
+{
+  gpiPoint *mirrored_corners = (gpiPoint*) gp_alloc(n*sizeof(gpiPoint),"mirrored_corners");
+  /* can't use memcpy() here, as we have to mirror the y axis */
+  gpiPoint *corners_copy = mirrored_corners;
+  while (corners_copy < (mirrored_corners + n)) {
+    *corners_copy = *corners++;
+    corners_copy->y = term->ymax - corners_copy->y;
+    ++corners_copy;
+  }
+
+  gp_cairo_draw_polygon(&plot, n, mirrored_corners);
+}
+
+#ifdef WITH_IMAGE
+void cairopng_image(unsigned M, unsigned N, coordval * image, gpiPoint * corner, t_imagecolor color_mode)
+{
+  /* This routine is to plot a pixel-based image on the display device.
+     'M' is the number of pixels along the y-dimension of the image and
+     'N' is the number of pixels along the x-dimension of the image.  The
+     coordval pointer 'image' is the pixel values normalized to the range
+     [0:1].  These values should be scaled accordingly for the output
+     device.  They 'image' data starts in the upper left corner and scans
+     along rows finishing in the lower right corner.  If 'color_mode' is
+     IC_PALETTE, the terminal is to use palette lookup to generate color
+     information.  In this scenario the size of 'image' is M*N.  If
+     'color_mode' is IC_RGB, the terminal is to use RGB components.  In
+     this scenario the size of 'image' is 3*M*N.  The data appears in RGB
+     tripples, i.e., image[0] = R(1,1), image[1] = G(1,1), image[2] =
+     B(1,1), image[3] = R(1,2), image[4] = G(1,2), ..., image[3*M*N-1] =
+     B(M,N).  The 'image' is actually an "input" image in the sense that
+     it must also be properly resampled for the output device.  Many output
+     mediums, e.g., PostScript, do this work via various driver functions.
+     To determine the appropriate rescaling, the 'corner' information
+     should be used.  There are four entries in the gpiPoint data array.
+     'corner[0]' is the upper left corner (in terms of plot location) of
+     the outer edge of the image.  Similarly, 'corner[1]' is the lower
+     right corner of the outer edge of the image.  (Outer edge means the
+     outer extent of the corner pixels, not the middle of the corner
+     pixels.)  'corner[2]' is the upper left corner of the visible part
+     of the image, and 'corner[3]' is the lower right corner of the visible
+     part of the image.  The information is provided in this way because
+     often it is necessary to clip a portion of the outer pixels of the
+     image. */
+
+  /* we will draw an image, scale and resize it */
+  /* FIXME add palette support ??? */
+
+  gp_cairo_draw_image(&plot, image,
+                      corner[0].x, term->ymax - corner[0].y,
+                      corner[1].x, term->ymax - corner[1].y,
+                      corner[2].x, term->ymax - corner[2].y,
+                      corner[3].x, term->ymax - corner[3].y,
+                      M, N,
+                      color_mode);
+
+}
+#endif /*WITH_IMAGE*/
+
+#endif /* TERM_BODY */
+
+#ifdef TERM_TABLE
+TERM_TABLE_START (cairopng_driver)
+"cairopng", "png terminal based on cairo",
+/* the following values are overriden by cairopng_graphics */
+  1 /* xmax */ , 1 /* ymax */ , 1 /* vchar */ , 1 /* hchar */ ,
+  1 /* vtic */ , 1 /* htic */ ,
+  cairopng_options, cairopng_init, cairopng_reset, cairopng_text, null_scale, cairopng_graphics,
+  cairopng_move, cairopng_vector, cairopng_linetype, cairopng_put_text,
+  cairopng_text_angle, cairopng_justify_text,
+  cairopng_point, do_arrow, cairopng_set_font,
+  cairopng_pointsize, TERM_CAN_MULTIPLOT|TERM_BINARY,
+  cairopng_text /* suspend */, 0 /* resume */, cairopng_fillbox, cairopng_linewidth
+#ifdef USE_MOUSE
+  , 0, 0, 0, 0, 0
+#endif
+  , cairopng_make_palette, 0 /* cairopng_previous_palette */, cairopng_set_color, cairopng_filled_polygon
+#ifdef WITH_IMAGE
+  , cairopng_image
+#endif
+  , gp_cairo_enhanced_open, gp_cairo_enhanced_flush, do_enh_writec
+  TERM_TABLE_END (cairopng_driver)
+
+#undef LAST_TERM
+#define LAST_TERM cairopng_driver
+
+#endif /* TERM_TABLE */
+#endif /* TERM_PROTO_ONLY */
+
+#ifdef TERM_HELP
+  START_HELP(cairopng)
+  "1 cairopng",
+  "?set terminal cairopng",
+  "?terminal cairopng",
+  "?set term cairopng",
+  "?term cairopng",
+  "?cairopng",
+  " The `cairopng` terminal device generates output in png. The actual",
+  " drawing is done via cairo, a 2D graphics library, and pango, a library for",
+  " laying out and rendering text.",
+  "",
+  " Syntax:",
+  "         set term cairopng",
+  "                      {{no}enhanced} {mono|color} {solid|dashed}",
+  "                      {font <font>}",
+  "                      {linewidth <lw>} {rounded|butt} {dashlength <dl>}",
+  "                      {size <XX>{unit},<YY>{unit}}",
+  "",
+  " This terminal supports an enhanced text mode, which allows font and other",
+  " formatting commands (subscripts, superscripts, etc.) to be embedded in labels",
+  " and other text strings. The enhanced text mode syntax is shared with other",
+  " gnuplot terminal types. See `enhanced` for more details.",
+  "",
+  " The width of all lines in the plot can be modified by the factor <lw>",
+  " specified in `linewidth`. The default linewidth is 0.25 points.",
+  " (1 \"PostScript\" point = 1/72 inch = 0.353 cm)",
+  "",
+  " `rounded` sets line caps and line joins to be rounded; `butt` is the",
+  " default, butt caps and mitered joins.",
+  "",
+  " The default size for the output is 5 inches x 3 inches. The `size` option",
+  " changes this to whatever the user requests. By default the X and Y sizes are",
+  " taken to be in inches, but other units are possibly (currently only cm).",
+  " Screen coordinates always run from 0.0 to 1.0 along the full length of the",
+  " plot edges as specified by the `size` option.",
+  "",
+  " <font> is in the format \"FontFace,FontSize\", i.e. the face and the size",
+  " comma-separated in a single string. FontFace is a usual font face name, such",
+  " as \'Arial\'. If you do not provide FontFace, the cairopng terminal will use",
+  " \'Sans\'. FontSize is the font size, in points. If you do not provide it,",
+  " the cairopng terminal will use a size of 6 points.",
+  "    For example :",
+  "       set term cairopng font \"Arial,12\"",
+  "       set term cairopng font \"Arial\" # to change the font face only",
+  "       set term cairopng font \",12\" # to change the font size only",
+  "       set term cairopng font \"\" # to reset the font name and size",
+  "",
+  " The fonts are retrieved from the usual fonts subsystems. Under Windows,",
+  " those fonts are to be found and configured in the entry \"Fonts\" of the",
+  " control panel. Under UNIX, they are handled by \"fontconfig\".",
+  "",
+  " Pango, the library used to layout the text, is based on utf-8. Thus, the cairopng",
+  " terminal has to convert from your encoding to utf-8. The default input",
+  " encoding is based on your \'locale\'. If you want to use another encoding,",
+  " make sure gnuplot knows which one you are using. See `encoding` for more",
+  " details.",
+  "",
+  " Pango may give unexpected results with fonts that do not respect the unicode",
+  " mapping. With the Symbol font, for example, the cairopng terminal will use the map",
+  " provided by http://www.unicode.org/ to translate character codes to unicode.",
+  " Note that \"the Symbol font\" is to be understood as the Adobe",
+  " Symbol font, distributed with Acrobat Reader as \"SY______.PFB\".",
+  " Alternatively, the OpenSymbol font, distributed with OpenOffice.org as",
+  " \"opens___.ttf\", offers the same characters. Microsoft has distributed a",
+  " Symbol font (\"symbol.ttf\"), but it has a different character set with",
+  " several missing or moved mathematic characters. If you experience problems",
+  " with your default setup (if the demo enhancedtext.dem is not displayed",
+  " properly for example), you probably have to install one of the Adobe or",
+  " OpenOffice Symbol fonts, and remove the Microsoft one.",
+  " Other non-conform fonts, such as \"wingdings\" have been observed working.",
+  "",
+  " The rendering of the plot cannot be altered yet. To obtain the best output",
+  " possible, the rendering involves two mechanisms : antialiasing and",
+  " oversampling.",
+  " Antialiasing allows to display non-horizontal and non-vertical lines",
+  " smoother.",
+  " Oversampling combined with antialiasing provides subpixel accuracy,",
+  " so that gnuplot can draw a line from non-integer coordinates. This avoids",
+  " wobbling effects on diagonal lines ('plot x' for example).",
+  ""
+  END_HELP(cairopng)
+#endif /* TERM_HELP */
+
